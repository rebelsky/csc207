<section id="code-conventions"><title>Code Conventions</title>

<section id="introduction"><title>Introudction</title>

<para>
  English writers follow conventions of the English language.  (Okay,
  not all of them, but most of them.)  These conventions dictate not only
  word meaning and order, but also punctuation.  And following
  conventions makes text more readable.  Think of how hard it is to read
  things that are missing spaces, have inconsistent indentation, or shove
  extra punctuation in the middle of lines.  Similarly, programmers
  also have conventions to follow.  Some come from the language (e.g., the
  meanings of braces), but many come from the local programming community.
  Conventions dictate indentation, the way loops are formatted, the way
  and place variables are declared, and so on and so forth.
</para>

<para>
  I think it's difficult to read badly formatted code.  I know it's
  difficult to read code that's formatted using multiple styles.
  I've observed that almost every FOSS community has coding conventions
  for their projects - how loops are formatted, how variables are
  declared, and so on and so forth.  And I hear from our alums that
  most of the companies they work for require that their programmers
  follow local coding conventions when working on a project.  Hence,
  <emphasis>I require that students in this course follow coding
  conventions</emphasis>.
</para>

<para>
  My favorite set of code conventions is the <ulink
  url="http://www.gnu.org/prep/standards/standards.html#Formatting">GNU
  C Source Code Formatting Standards</ulink>, which I use in all of
  my C coding projects (not least because I work on GIMP source code,
  which follows those conventions).  But these have not been extended
  for Java.
</para>

<para>
  There are a widely accepted set of Java coding conventions, <ulink
  url="http://www.oracle.com/technetwork/java/codeconv-138413.html">Code
  Conventions for the Java Programming Language</ulink>, published by
  the now-defunct Sun Microsystems, the original designers of the Java
  programming language.  I find these conventions misguided, at best.
  I attempted to use them my first semester teaching this course and
  found them even more painful than I'd thought.
</para>

<para>
  What's the solution?  I have a set of conventions that I like, which
  essentially extend the GNU standards in natural ways to Java.
  However, I have not been able to convince Eclipse to format code
  using these conventions.  Hence, I will also provide some alternative
  conventions, along with an Eclipse formatter that helps you 
  achieve those conventions.
</para>

<para>
  How serious am I that I expect you to use these conventions?  Serious
  enough that <emphasis>I will return ungraded any work I receive that has
  five or more violations of the Code Conventions</emphasis>.  Students
  may then correct those violations and return the work to me, although
  I will then impose a penalty (approximately 10% of the grade on the
  assignment) after regrading.  I will not apply this policy to code
  written during class time (e.g., during an in-class examination).
</para>

<para>
  I also require you to comment your end braces.  In my too many years of
  programming and helping students debug programs, I've found that knowing
  what a brace is supposed to end is incredibly helpful (particularly
  since we often forget or add extra end braces).
</para>

</section> <!-- introduction -->

</section> <!-- code-conventions -->

