<section id="assignment02"><title>Assignment 2: Getting Started with Java and Testing</title>

<para>
  <emphasis>Due:</emphasis> &assignment02-due;
</para>

<para>
  <emphasis>Summary:</emphasis>
  You will explore a variety of issues related to Java programming
</para>

<para>
  <emphasis>Purposes:</emphasis>  
  To get you used to programming in Java.  To get you used to submitting
  homework via GitHub.  To help you start thinking about objects.  To 
  get you accustomed to test-focused development.
</para>

<para>
  <emphasis>Collaboration:</emphasis>  
  You are required to work in a group.  I encourage you to work in
  groups of size three. You may, however, work in a group of size two
  or size four.  You may discuss this assignment with anyone, provided
  you credit such discussions when you submit the assignment.
</para>

<para>
  <emphasis>Wrapper (Prologue):</emphasis> Individually read through
  this assignment and make sure that you understand what is required.
  Then use the form available at <ulink url="http://bit.ly/207hw2pro"/>
  to indicate (a) how long you think this assignment will take and (b)
  what you think will be the most challenging aspect of this assignment.
</para>

<para>
  <emphasis>Wrapper (Epilogue):</emphasis> When you are done
  with the assignment, fill out the form available at <ulink
  url="http://bit.ly/207hw2epi"/> to indicate (a) how long the
  assignment took, (b) what the most challenging part of the assignment
  was, and (c) something important you learned from doing the assignment.
  If you find that the assignment took much less or much more time than
  you expected, also include (d) a note as to what might have led to
  that difference.
</para>

<para>
  <emphasis>Submitting:</emphasis> 
  Please put all of your work in a GitHub repository named
  <code>csc207-hw2</code>.  Email the address of that repository 
  to grader-207@cs.grinnell.edu.
  Please use a subject of <quote>CSC207 &semester; Assignment 2
  (<emphasis>Your Name</emphasis>)</quote>.
</para>

<para>
  <emphasis>Warning:</emphasis> 
  So that this assignment is a learning experience for everyone, we may
  spend class time publicly critiquing your work.
</para>

<section id="assignment02-arrays"><title>A Quick Note on Arrays</title>

<para>
  A few problems in this assignment ask you to work with
  arrays.  Arrays in Java work much like arrays in C except,
  except that you can find out the length of an array with
  <code><emphasis>array</emphasis>.length</code> and you use the following
  approaches to initialize arrays.
</para>

<programlisting>
     // Create an array of 10 integer values.
     int[] vals = new int[10];
     // Create an array with particular strings
     String[] profs = { "Davis", "Rebelsky", "Stone", "Walker", "Weiman" };
</programlisting>

</section> <!-- assignment-02-arrays -->

<section id="assignment02-assignment"><title>Assignment</title>

<section id="assignment02-A"><title>Part A: Java as Imperative Language</title>

<para>
  Consider the six following static methods.
</para>

<itemizedlist>
  <listitem>
     <methodname>isMultiple</methodname>, which takes as input two
     variables, <code>a</code> and <code>b</code>, of type
     <code>long</code>, and returns <code>true</code> if and only
     if there is an integer, <code>i</code>, such that
     <code>a</code> == <code>b*i</code>.
  </listitem>

  <listitem>
    <methodname>isOdd</methodname>, which takes as input a variable,
    <code>i</code>, of type <code>int</code> returns <code>true</code>
    if <code>i</code> is odd and <code>false</code> if <code>i</code>
    is not odd.  In solving this problem, <emphasis>you may not
    use</emphasis> multiplication, modulus, or division.  You also
    may not use <methodname>isMultiple</methodname>.
  </listitem>

  <listitem>
    <methodname>oddSumTo</methodname>, which takes as input a variable,
    <code>n</code>, of type <code>int</code>, and returns the sum of
    all positive odd numbers less than <code>n</code>.
  </listitem>

  <listitem>
    <methodname>isOddProd</methodname>, which takes as input
    <code>ints</code>, an array of <code>int</code> values and returns
    <code>true</code> if any pair of numbers in the array has a product
    that is odd and <code>false</code> otherwise.  Note that you can
    use <code>ints.length</code> to determine the length of the array.
  </listitem>

  <listitem>
    <methodname>allDistinct</methodname>, which take as input
    an array of <code>int</code> values and returns <code>true</code> if
    no two elements have equal values and <code>false</code> otherwise.
  </listitem>

  <listitem>
    <methodname>reverseInts</methodname>, which takes as input
    an array of <code>int</code> values and reverses their order
    <emphasis>in the same array</emphasis>.
  </listitem>
</itemizedlist>

<para>
  We will group all of these in a class we call <code>TwoA</code>.  (How's
  that for creative naming?)
</para>

<para>
  1. Write a class, <code>TestTwoA</code>, which contains six methods,
  each of which tests one of the methods above.  Your tests should use
  the <code><methodname>assertEquals</methodname>(String message,
  <emphasis>type</emphasis> expected, <emphasis>type</emphasis> actual)</code>
  method.  For example, I might write,
</para>

<programlisting>
    @Test
    void test_isOdd(void) {
      assertEquals("negative even", false, TwoA.isOdd(-4));
      // Integer.MAX_VALUE is 2^31 - 1, which is odd
      assertEquals("MAX_VALUE", true, TwoA.isOdd(Integer.MAX_VALUE));
      ...
    } // test_isOdd
</programlisting>

<para>
  2. Implement all of the methods in <code>TwoA</code>.
</para>

</section> <!-- assignment02-A -->

<section id="assignment02-B"><title>Part B: Averaging</title>

<para>
  The following method has at least one subtle bug.  Identify and correct 
  that bug.  
</para>

<programlisting>
public class TwoB {
  /**
   * Compute the average of two integers.  Rounds toward zero if the
   * average is not a whole number.
   */
  public static int 
    average (int left, int right) 
  {
    return (left + right) / 2;
  } // average(int,int)
} // class TwoB
</programlisting>

</section> <!-- assignment02-B -->

<section id="assignment02-C"><title>Part C: Designing Objects</title>

<para>
  When designing objects, a good first step is to consider what
  natural operations are associated with the object.  Traditionally,
  we consider three kinds of operations:
</para>

<itemizedlist>
  <listitem>
    <emphasis>Observers</emphasis> extract information from an
    object, but do not modify the object.  For example, an 
    might have an observer that extracts the value of a counter object.
  </listitem>

  <listitem>
    <emphasis>Mutators</emphasis> modify objects.  For example,
    we might have a mutator that increments the value of a counter
    object.
  </listitem>

  <listitem>
    <emphasis>Constructors</emphasis> build new objects.  For example,
    we are likely to want a constructor that creates a new counter
    object.
  </listitem>
</itemizedlist>

<para>
  Some methods do more than one thing.  For example, an object that
  represents an idea might have a method that creates a derivative idea.
  Such a method is a constructor, because it creates a new idea.  But
  it's also likely to mutate our original idea (at the very least, by
  creating a link to the derivative).
</para>

<para>
  Sketch a class that provides all of the methods you think would
  be useful for working with rational numbers.  For each method, indicate
  you would want such a class to support.  For each method, indicate
  name, inputs, output, general purpose, and type of method (observer,
  mutator, constructor).  
</para>

<para>
  You sketch should be code that compiles, but need do anything.
  You should use a <emphasis>stub</emphasis> for the bodies of methods.
  That is, just return some default value.  If you need to return an
  object, return the special value <code>null</code>.
</para>

<para>
  Note that the object is <emphasis>implicit</emphasis> for methods
  associated with that object.  Hence, you need not specify the 
  rational number you're working with.  For example,
</para>

<programlisting>
  /**
   * Get the numerator of this rational number.  (Observer)
   */
  public int numerator () 
  {
    return 0;        // STUB
  } // numerator

  /**
   * Multiply this rational number by an integer.  (Observer/Constructor)
   */
  public Rational multiply (int multiplicand) 
  {
    return null;     // STUB
  } // multiply (int)
</programlisting>

</section> <!-- assignment02-C -->

</section> <!-- id="assignment02-assignment" -->

<section id="assignment02-citations"><title>Citations</title>

<para>
  The six methods in part A are adapted from an assignment by Jerod
  Weinman.  Prof. Weinman in turn adapted those from section 1.0 of M. T.
  Goodrich and R. T. Tamassia's <emphasis>Data Structures &amp; Algorithms
  in Java, 4/e</emphasis> (Wiley, 2005).
</para>

<para>
  The <code>Rational</code> problems are based on problems I wrote
  for CSC 152 in the distant past.
</para>

</section> <!-- citations -->

</section> <!-- id="assignment02" -->
