<section name="exam-01"><title>Exam 1: Object-Oriented Design, ADTs, and Algorithms</title>

<para>
  Assigned: &wed04;
</para>

<para>
  Due: 10:30 p.m., &wed05; (electronic); 10:00 a.m., &fri05; (paper)
</para>

<section name="prelim"><title>Preliminaries</title>

<section name="format"><title>Exam Format</title>

<para>
  This is a take-home examination. You may use any time or times you deem
  appropriate to complete the exam, provided you return it to me by the
  due date.
</para>

<para>
  There are four problems on this examination. You must do your best
  to answer all of them.  The problems are not necessarily
  of equal difficulty. Problems may include subproblems. If you
  complete four problems correctly or mostly correctly, you will 
  earn an A.  If you complete three problems correctly or mostly
  correctly, you will earn a B.  If you complete two problems
  correctly or mostly correctly, you will earn a C.  If you complete
  one problem correctly or mostly correctly, you will earn a D.
  If you complete fewer than one problem correctly or mostly
  correctly, you will earn an F.  If you do not attempt the examination,
  you will earn a 0.  Partially correct solutions may or may not earn
  you a partial grade, depending on the discretion of the grader.
</para>

<para>
  <emphasis>Read the entire examination before you begin.</emphasis>
</para>

<para>
  I expect that someone who has mastered the material and works at a
  moderate rate should have little trouble completing the exam in a
  reasonable amount of time. In particular, this exam is likely to take
  you about six hours, depending on how well you've learned the topics
  and how fast you work.  (When I do the problems, I will report how
  long each one took me.)
</para>

</section> <!-- format -->

<section name="honesty"><title>Academic Honesty</title>

<para>
  This examination is open book, open notes, open mind, open computer,
  and open Web. However, it is closed person. That means you should
  not talk to other people about the exam. Other than as restricted by
  that limitation, you should feel free to use all reasonable resources
  available to you.
</para>

<para>
  As always, you are expected to turn in your own work. If you find ideas
  in a book or on the Web, be sure to cite them appropriately. If you use
  code that you wrote for a previous lab or homework, cite that lab or
  homework and the other members of your group. If you use code that you
  found on the course Web site, be sure to cite that code. You need not
  cite the code provided in the body of the examination.
</para>

<para>
  Although you may use the Web for this exam, you may not post your
  answers to this examination on the Web.  (You certainly should not post
  them to GitHub.)  And, in case it's not clear, you may not ask others
  (in person, via email, via IM, via IRC, by posting a <quote>please
  help</quote> message, or in any other way) to put answers on the Web.
</para>

<para>
  Because different students may be taking the exam at different times,
  you are not permitted to discuss the exam with anyone until after I have
  returned it. If you must say something about the exam, you are allowed
  to say <quote>This is among the hardest exams I have ever taken. If
  you don't start it early, you will have no chance of finishing the
  exam.</quote> You may also summarize these policies. You may not tell
  other students which problems you've finished. You may not tell other
  students how long you've spent on the exam.
</para>

<para>
  You must include both of the following statements on the cover sheet
  of the examination.
</para>

<orderedlist>
  <listitem>
    I have neither received nor given inappropriate assistance on 
    this examination.
  </listitem>
  <listitem>
     I am not aware of any other students who have given or received 
     inappropriate assistance on this examination. 
  </listitem>
</orderedlist>

<para>
  Please sign and date each statement. Note that the statements must be
  true; if you are unable to sign either statement, please talk to me
  at your earliest convenience. You need not reveal the particulars of
  the dishonesty, simply that it happened. Note also that inappropriate
  assistance is assistance from (or to) anyone other than Professor
  Rebelsky (that's me).
</para>

</section> <!-- honesty -->

<section name="presentation"><title>Presenting Your Work</title>

<para>
  You must present your exam to me in two forms, physically and
  electronically.  If you fail to turn in both versions, you are unlikely
  to receive credit for the examination.
</para>

<para>
  <emphasis>Physical copy:</emphasis> 
  You must write all of your answers using the computer, print them out,
  number the pages; put your name on the top of every page, write, sign,
  and date each of the academic honesty statements (provided you are able
  to do so); and hand me the printed copy or put it under my office door.
  If you fail to name and number the printed pages, you may suffer
  a penalty.  If you fail to turn in a legible version of the exam,
  you are also likely to suffer some sort of penalty.
</para>

<para>
  <emphasis>Electronic copy:</emphasis>
  You must also submit an electronic copy of your exam.  You should
  create the electronic version by making a tarball of any relevant code
  and emailing me the tarball.  Here are the steps for making a tarball.
</para>

<orderedlist>
  <listitem>
    Remove any cruft (needless files) from your directory structure.
    I don't want to see <code>.class</code> files, editor backups,
    or anything similar.
  </listitem>

  <listitem>
    Switch to the <emphasis>parent</emphasis> directory of your
    exam directory.
  </listitem>

  <listitem>
    Issue the command <code>tar cvzf <emphasis>username</emphasis>.tgz 
    <emphasis>directory</emphasis></code>.
  </listitem>
</orderedlist>

<para>
  <emphasis>Code:</emphasis> In many problems, I ask you to write
  code. Unless I specify otherwise in a problem, you should write working
  code and include examples that show that you've tested the code.
  You should do your best to format that code to the class 
  formatting standards.
</para>

<para>
  <emphasis>Documentation:</emphasis> You should document classes,
  interfaces, fields, and methods using Javadoc-style comments.
  You should specify preconditions and postconditions for each method.
</para>

<para>
  <emphasis>Care:</emphasis>
  Just as you should be careful and precise when you write code and
  documentation, so should you be careful and precise when you write
  prose. Please check your spelling and grammar. Since I should be equally
  careful, the whole class will receive one point of extra credit for each
  error in spelling or grammar you identify on this exam. I will limit
  that form of extra credit to five points.
</para>

<para>
  <emphasis>Partial Credit:</emphasis>
  I may give partial credit for partially correct answers. I am best
  able to give such partial credit if you include a clear set of work
  that shows how you derived your answer. You ensure the best possible
  grade for yourself by clearly indicating what part of your answer is
  work and what part is your final answer.
</para>

</section> <!-- presentation -->

<section name="getting-help"><title>Getting Help</title>

<para>
  I may not be available at the time you take the exam. If you feel that
  a question is badly worded or impossible to answer, note the issue
  you have observed and attempt to reword the question in such a way that
  it is answerable.  You should also feel free to send me electronic mail
  at any time of day.
</para>

<para>
  I will also reserve time at the start of each class before the exam is
  due to discuss any general questions you have on the exam.
</para>

</section> <!-- getting-help -->

</section> <!-- prelim -->

<section name="preparation"><title>Preparation</title>

<para>
  Clone the repository using the following command, which will help
  ensure that you have the correct directory structure.  Note that
  I've set things up so that you can treat each problem as a separate
  Eclipse project.  <emphasis>Please do not make one project for the
  whole exam.</emphasis>
</para>

<screen>
$ git clone https://github.com/Grinnell-CSC207/exam1-2014S *username*
</screen>

</section> <!-- preparation -->

<section name="problems"><title>Problems</title>

<section id="average-testing"><title>Problem 1: Testing Averages</title>

<para>
  <emphasis>This problem took SR 35 minutes, mostly because he wrote
  a strange and incorrect test.</emphasis>
</para>

<para>
  Your classmate, Ava Ridge, was intrigued by the recent discussion of
  problem 2 from homework one and has decided to write the following
  function so that it works for all long inputs.
</para>

<programlisting>
/**
 * Ava's amazing math utilities.
 */
public class MathUtils
{
  /**
   * Compute the average of all the values in vals. Rounds toward
   * zero if the average is not a whole number.
   *
   * @throws Exception
   *   if the array is empty, because there is no average value
   *   in an empty set.
   */
  public static long average(long[] vals)
    throws Exception
  {
    ...;
  } // average(long[])
} // class MathUtils
</programlisting>

<para>
  Your class mentors, Tessa Ter and Jun It, think we should help Ava
  make sure that her code is correct.  They have therefore asked you
  to write an appropriate test suite for <methodname>average</methodname>.
</para>

<para>
  <emphasis>Write that test suite.</emphasis>  Your test suite should
  certainly include tests of <quote>corner cases</quote> - those outliers
  that many folks will miss.  In addition, portions of your test suite
  should be systematically constructed.  That is, you should use loops
  to build an appropriate variety of arrays of different sizes.
</para>

<para>
  If at all possible, make sure that your test suite indicates the input
  for which <methodname>average</methodname> fails (assuming that it
  finds an input for which <methodname>average</methodname> fails).
</para>

<para>
  I am likely to run your test suite against a variety of implementations
  of <methodname>average</methodname>, some of which are correct and
  some of which are incorrect.  You will get no credit for this problem
  if you identify a correct <methodname>average</methodname> method as 
  incorrect.  You will get partial credit if you miss errors in 
  erroneous implementations.  You will get extra credit if you find
  an error in an implementation that I believe is correct.
</para>

</section> <!-- average-testing -->

<section id="averaging"><title>Problem 2: Averaging Arrays</title>

<para>
  <emphasis>This problem took Sam fifteen minutes, including writing
  <code>AverageExpt.java</code>, which is now in the repo.</emphasis>
</para>

<para>
  Unfortunately, the combined class unit tests have shown that Ava's
  implementation of <methodname>average</methodname> is far from correct.
  (Actually, it's probably fortunate that the tests have shown her
  method incorrect.  She would likely hit unexpected errors in the future
  if she were relying on incorrect code.)
</para>

<para>
  Ava can't figure out how to write <methodname>average</methodname>.
  Your professor, Hugh DeWitt, has therefore decided to make everyone
  in the class attempt their own implementation.
</para>

<para>
  <emphasis>Implement <methodname>average</methodname>.</emphasis>
  Your method should take an array of <code>long</code> values as input
  and return a <code>long</code> that represents the average of those
  values.  You may not convert the values to <code>BigInteger</code>
  or <code>BigDecimal</code> values.  
</para>

</section> <!-- implement-average -->

<section id="c-strings"><title>Problem 3: Making C and Java Strings</title>

<para>
  <emphasis>This problem took SR 15 minutes, including adding a few
  more examples.</emphasis>
</para>

<para>
  Your classmates, Slash and Becka, were a bit puzzled by the whole
  CSV thing.  In particular, they are not sure about all of those
  <code>\</code> characters.  In response, you say
</para>

<blockquote>
  It's simple.  Certain special characters with meaning, such as the
  double quotation mark, need to be prefixed by the escape character,
  which is <code>\</code>.  So, the string that contains just one
  double quotation mark is <code>"\""</code>.  The escape character 
  is also one of those special characters.  Hence, the string that
  contains just the backslash character is <code>"\\"</code>.
  Of course, backslash is also used for some <quote>invisible</quote>
  characters, such as tabs (<code>\t</code>) and newlines
  (<code>\n</code>).  How do I know so much, I looked it up in
  <ulink url="http://docs.oracle.com/javase/tutorial/java/data/characters.html">The Java Tutorial</ulink>.
</blockquote>

<para>
  Otto Mayt, a more experienced student, wanders by and says <quote>Of
  course, any decent programmer has already written a script that does
  the conversion by hand.</quote>
</para>

<para>
  You guessed it.  Your professor, Hugh DeWitt, overheard and has
  decided that you get to write that script.
</para>

<para>
  Write a method,
  <code><methodname>stringify</methodname>(<parameter>infile</parameter>,
  <parameter>outfile</parameter>)</code> that reads the contents of
  <parameter>infile</parameter> and writes the corresponding
  C/Java string to <parameter>outfile</parameter>.  Since you will
  probably read the input a line at a time, you may include a
  <code>\n</code> at the end of the string.
</para>

<para>
  For example,
</para>

<table>
  <thead>
    <tr>
      <th>Input</th>
      <th>Output</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><programlisting>Hello</programlisting></td>
      <td><programlisting>"Hello\n"</programlisting></td>
    </tr>
    <tr>
      <td><programlisting>Hello
World</programlisting></td>
      <td><programlisting>"Hello\nWorld\n"</programlisting></td>
    </tr>
    <tr>
      <td><programlisting>Hello   World</programlisting></td>
      <td><programlisting>"Hello\tWorld\n"</programlisting></td>
    </tr>
    <tr>
      <td><programlisting>a,"a,b","\"</programlisting></td>
      <td><programlisting>"a,\"a,b\",\"\\\"\n"</programlisting></td>
    </tr>
  </tbody>
</table>

<para>
  The only special characters you need to support are newline, tab,
  double-quotation mark, and backslash.
</para>

<para>
  I've set up a simple test framework that you can feel free to extend.
</para>

</section> <!-- c-strings -->

<section id="mutable-strings"><title>Problem 4: Mutable Strings</title>

<para>
  <emphasis>SR took seven minutes for an inelegant solution and fifteen
  for a more elegant solution.</emphasis>
</para>

<para>
  Your colleagues, Cher and Ray, feel that Java's <code>StringBuffer</code>
  class hides too many of the details.  <quote>After all,</quote> they say,
  <quote>we don't <emphasis>really</emphasis> know how efficient any of
  the operations are.</quote>  They suggest we design and implement our
  own mutable string class, which they call <code>MutableString</code>.
  They suggest the following methods, which they've put in a stub 
  class.
</para>

<programlisting>
<xi:include href="../git/exam1-2014S/Problem4/src/MutableString.java" parse="text" xmlns:xi="http://www.w3.org/2001/XInclude"
/></programlisting>

<para>
  <emphasis>Finish implementing this class.</emphasis>
</para>

<para>
  You may not use <code>StringBuffer</code> or <code>StringBuilder</code>
  in implementing <code>MutableString</code>.  You must store the contents
  of the string as an array of characters.
</para>

</section> <!-- mutable-strings -->

</section> <!-- problems -->

<section name="q-and-a"><title>Questions and Answers</title>

<section id="questions-1"><title>Problem 1</title>

<para>
  What do you mean by a <quote>test suite</quote>?
</para>

<blockquote>
  A collection of unit tests that will assure you that the
  method or methods under test are correct.
</blockquote>

<para>
  Why did you provide a file called <quote><code>AverageTest.java</code></quote>?
</para>

<blockquote>
  To give you a place to put your tests. 
</blockquote>

<para>
  What should we do if there's a fractional part to the average?
</para>

<blockquote>
  You should round toward zero.
</blockquote>

</section> <!-- questions-1 -->

<section id="questions-2"><title>Problem 2</title>

<para>
  Why does my <methodname>average</methodname> method not work?
</para>

<blockquote>
  I would recommend that you step through it with the debugger.
  Here's a simple input that seems to have broken the first few
  <methodname>average</methodname> methods that I was asked to assess:
  <code>{ 1, 2, 3, 4, 5 }</code>.
</blockquote>

<para>
  Are we assured that all of the values in the array are
  less than or equal to <code>Long.MAX_VALUE</code> and greater than
  or equal to <code>Long.MIN_VALUE</code>?
</para>

<blockquote>
  Yes.  Because they have type <code>long</code>, they have to fall
  within that range.  
</blockquote>

</section> <!-- questions-2 -->

<section id="questions-3"><title>Problem 3</title>

<para>
  Do we have to support all of the special characters, or just the
  ones you mention?
</para>

<blockquote>
  The only special characters you need to support are newline, tab,
  double-quotation mark, and backslash.
</blockquote>

<para>
  Can we treat a sequence of spaces as equivalent to the tab character?
</para>

<blockquote>
  No.  You need to identify the tab character.  (There's one in 
  <code>examples/in03.txt</code> and a bunch in
  <code>examples/in05.txt</code>.)
</blockquote>

</section> <!-- questions-3 -->

<section id="questions-4"><title>Problem 4</title>

<para>
  Can I use <code>StringBuilder</code>?
</para>

<blockquote>
  No.
</blockquote>

<para>
  Do we have to implement <code>MutableString</code> objects with an
  array of characters?
</para>

<blockquote>
  Yes.  I've updated the problem to clarify that issue.
</blockquote>

</section> <!-- questions-4 -->

</section> <!-- q-and-a -->

<section name="errata"><title>Errata</title>

<para>
  Here you will find errors of spelling, grammar, and design that students 
  have noted. Remember, each error found corresponds to a point of
  extra credit for everyone. I usually limit such extra credit to five
  points. However, if I make an astoundingly large number of errors,
  then I will provide more extra credit.
</para>

<para>
  I will not accept corrections for credit until after I have taken the
  examination out of draft mode.
</para>

<para>
  I will not credit corrections for text in the Q&amp;A and errata sections,
  since those are often written quickly to get information out to students.
</para>

<itemizedlist>
  <listitem>
    <quote>The string that contains just one backslash should be
    <code>"\\"</code></quote> had a quotation mark instead of the 
    second backslash. [KN, 1 point]
  </listitem>

  <listitem>
    The rounding policy of <methodname>average</methodname> is unclear.
    [CT, 1 point]
  </listitem>

  <listitem>
    The ugly string example with lots of quotations and backslashes
    is missing the newline at the end. [SZ, 1 point]
  </listitem>

  <listitem>
    The documentation for <code>MutableString.prepend</code> is muddled.
    [SR, 1 point]
  </listitem>

  <listitem>
    The declaration for <code>MutableString.prepend</code> does not 
    match the documentation. [SR, 1 point]
  </listitem>

  <listitem>
    There are some typos in the newly updated <code>MutableString</code>.
    (Not yet fixed.)
    [VB, 0 points]
  </listitem>
</itemizedlist>

</section> <!-- errata -->

</section> <!-- exam01 -->
