<section id="assignment06"><title>Assignment 6: Linear Structures</title>

<para>
  <emphasis type="strong">This assignment is currently in draft form.
  </emphasis>
</para>

<para>
  <emphasis>Due:</emphasis> &assignment06-due;
</para>

<para>
  <emphasis>Summary:</emphasis>
  In this assignment, you will experiment with recent data structures
  and algorithms that we have been exploring.
</para>

<para>
  <emphasis>Purposes:</emphasis>  To give you more experience thinking
  about the implementation and use of linear structures.  To give you 
  experience writing interactive programs.
</para>

<para>
  <emphasis>Collaboration:</emphasis> I encourage you to work in groups
  of size two to four, although you may work alone.  You may discuss this
  assignment with anyone, provided you credit such discussions when you
  submit the assignment.
</para>

<para>
  <emphasis>Submitting:</emphasis> 
  Please put all of your work in a GitHub repository named
  <code>csc207-hw6</code>.  Email your grader the address of that repository.
  Please title your email <quote>CSC207 2014S Assignment 6
  (<emphasis>Your Names</emphasis>)</quote>.
</para>

<para>
  <emphasis>Warning:</emphasis> 
  So that this assignment is a learning experience for everyone, we may
  spend class time publicly critiquing your work.
</para>

<section id="assignment-06-assignment"><title>Assignment</title>

<section id="wrapped-array-based-queues"><title>Problem 1: Improving Array-Based Queues</title>

<para>
  The standard array-based implementation of queues uses two pointers: 
  one to keep track of where to put the next value (we'll call that
  <code>back</code>) and one to keep track of where to get the least
  recently added value (we'll call that <code>front</code>).  For example,
  after adding the strings <code>"alpha"</code>, <code>"beta"</code>,
  and <code>"gamma"</code> to an array-based queue, we might end up with the
  following.
</para>

<programlisting>
front            back
  |               |
  |       +-------+
  |       |
  v       v
+---+---+---+---+---+
| * | * | * | / | / |
+-|-+-|-+-|-+---+---+
  |   |   +---------------------------+
  |   |                               |
  |   +--------------+                |
  |                  |                |
  v                  v                v
  a l p h a \0 . . . b e t a \0 . . . g a m m a \0 . . .
</programlisting>

<para>
  That's a bit cumbersome to draw, so we'll use the usual shorthand
   of putting the values <quote>in</quote> the array.
</para>

<programlisting>
front            back
  |               |
  |               |  
  |               |
  v               v
+-------+-------+-------+-------+-------+
| alpha | beta  | gamma |       |       |
+-------+-------+-------+-------+-------+
</programlisting>

<para>
  After we add and remove a few elements (say we add another gamma and
  an alpha, and then remove the initial alpha and beta), we'll have 
  <quote>empty space</quote> at the beginning of the array
</para>

<programlisting>
front            back
  |               +---------------+
  |                               |  
  +---------------+               |
                  v               v
+-------+-------+-------+-------+-------+
|       |       | gamma | gamma | alpha |
+-------+-------+-------+-------+-------+
</programlisting>

<para>
  What happens if we add another element, say "delta"?  In the naive 
  implementation of array-based queues, we've run out of space.  But
  we should be able to <emphasis>wrap around</emphasis> to the front
  of the array.
</para>

<programlisting>
front            back 
  |  +------------+
  |  |            
  +--|------------+ 
  v--+            v 
+-------+-------+-------+-------+-------+
| delta |       | gamma | gamma | alpha |
+-------+-------+-------+-------+-------+
</programlisting>

<para>
  Implement and test array-based queues with wrapping.  You may find
  it useful to start with the <ulink url="https://github.com/Grinnell-CSC207/linear/blob/master/src/taojava/util/ArrayBasedQueue.java"><code>ArrayBasedQueue</code></ulink> class from the Tao of Java's
  <ulink url="https://github.com/Grinnell-CSC207/linear/">linear structures</ulink>
  repository.
</para>

</section> <!-- wrapped-array-based-queues -->

<section id="matching-parens"><title>Problem 2. Matching Parentheses and Other Symbols</title>

<para>
  Write a procedure that takes a string as input and prints out a
  picture that shows the nesting.  For each pair of matched symbols, you
  should draw a line underneath, as in the following picture.
</para>

<programlisting>
{oh [boy] (I am having) (&lt;so&gt; much) fun matching `symbols'}
    [---]
          (-----------)
                         &lt;--&gt;
                        (---------)
                                                 `-------'
{---------------------------------------------------------}
</programlisting>

<para>
  You should support parentheses, square brackets, curley braces,
  angle brackets, and matched single quotation marks.  You may also
  choose to support double-quotation marks, although they can be a
  bit troublesome.
</para>

<para>
  If the symbols do not match, you can do whatever you think is
  appropriate to indicate the failure to match.  For examlpe
</para>

<programlisting>
(Hello (world)
       (-----)
( &lt; - UNMATCHED
</programlisting>

<programlisting>
(Hello (world))}  ]
       (-----)
(-------------)
               } &lt;- UNMATCHED
                  ] &lt;- UNMATCHED
</programlisting>

<para>
  To solve this problem, you will need to store the indices of the
  matching symbols on the stack.  That is, you will need to push both
  symbol and index.  How can you store two kinds of values in stack?
  One option is to make it a stack of general Objects, and alternately
  push Character and Integer objects.  Another option is to create a
  simple class that groups a character and an integer.
</para>

</section>

<section id="rpn"><title>Problem 3. A Reverse Polish Notation Calculator</title>

<para>
  Implement a calculator that uses Reverse Polish Notation (RPN).  You 
  should support input of real numbers and the following operations:
</para>

<itemizedlist>
  <listitem>
    +, -, *, / - the standard arithmetic operators;
  </listitem>

  <listitem>
    p - print the top value on the stack;
  </listitem>

  <listitem>
    s - print the whole stack;
  </listitem>

  <listitem>
    c - clear the stack; and
  </listitem>

  <listitem>
    one other interesting operation of your choice.
  </listitem>
</itemizedlist>

<para>
  Although it doesn't have exactly the same interface, you can experiment
  with the command-line RPN calculator <code>dc</code> to help understand
  these operations.  (I don't think <code>dc</code> provides
  <code>s</code>.)
</para>

<para>
  In implementing your calculator, do your best to use the 
  model-view-controller (MVC) pattern.  You may need to Google that
  pattern.
</para>

</section> 

</section> <!-- id="assignment06-assignment" -->

<section id="assignment06-citations"><title>Citations</title>

<para>
  I've assigned problem one before, but I don't recall when.
</para>

<para>
  Problem two is adapted from the extra problems in the lab on stacks.  
  I've modified the text slightly in combining the problems.
</para>

<para>
  Problem three comes from an assignment from a previous semester.
  I've taken the text mostly verbatim.
</para>

</section> <!-- citations -->

</section> <!-- id="assignment06" -->
